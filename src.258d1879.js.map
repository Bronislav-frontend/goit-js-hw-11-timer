{"version":3,"sources":["index.js"],"names":["refs","elDays","document","querySelector","elHours","elMins","elSecs","CountdownTimer","constructor","selector","targetDate","intervalId","startInterval","setInterval","currentTime","Date","now","deltaTime","countDown","getTimeComponents","updateClockInterface","pad","value","String","padStart","time","days","Math","floor","hours","mins","secs","textContent","timer"],"mappings":";AAAA,MAAMA,EAAO,CACXC,OAAQC,SAASC,cAAc,uBAC/BC,QAASF,SAASC,cAAc,wBAChCE,OAAQH,SAASC,cAAc,uBAC/BG,OAAQJ,SAASC,cAAc,wBAGjC,MAAMI,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBC,KAAAA,WAAa,KACbF,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAGpBE,gBACOH,KAAAA,SAAWI,YAAY,KACpBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKP,WAAaI,EAC9BI,EAAY,KAAKC,kBAAkBF,GAEpCG,KAAAA,qBAAqBF,IAC3B,KAGHG,IAAIC,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCL,kBAAkBM,GAMT,MAAA,CAAEC,KALI,KAAKL,IAAIM,KAAKC,MAAMH,EAAQ,QAK1BI,MAJD,KAAKR,IAAIM,KAAKC,MAAOH,EAAQ,MAAyB,OAI9CK,KAHT,KAAKT,IAAIM,KAAKC,MAAOH,EAAQ,KAAoB,MAGlCM,KAFf,KAAKV,IAAIM,KAAKC,MAAOH,EAAQ,IAAc,OAK1DL,sBAAqB,KAAEM,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IACxC/B,EAAKC,OAAO+B,YAAcN,EAC1B1B,EAAKI,QAAQ4B,YAAcH,EAC3B7B,EAAKK,OAAO2B,YAAcF,EAC1B9B,EAAKM,OAAO0B,YAAcD,GAI9B,MAAME,EAAQ,IAAI1B,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIK,KAAK,kBAGvBkB,EAAMrB","file":"src.258d1879.js","sourceRoot":"..\\src","sourcesContent":["const refs = {\n  elDays: document.querySelector('[data-value=\"days\"]'),\n  elHours: document.querySelector('[data-value=\"hours\"]'),\n  elMins: document.querySelector('[data-value=\"mins\"]'),\n  elSecs: document.querySelector('[data-value=\"secs\"]'),\n}\n\nclass CountdownTimer {\n  constructor({ selector, targetDate}) {\n    this.intervalId = null\n    this.selector = selector\n    this.targetDate = targetDate\n  }\n\n  startInterval() {\n    this.selector = setInterval(() => {\n      const currentTime = Date.now()\n      const deltaTime = this.targetDate - currentTime\n      const countDown = this.getTimeComponents(deltaTime)\n\n      this.updateClockInterface(countDown)\n  }, 1000)\n  }\n    \n  pad(value) {\n    return String(value).padStart(2, '0')\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    \n    return { days, hours, mins, secs}\n  }\n\n  updateClockInterface({ days, hours, mins, secs }) {\n    refs.elDays.textContent = days\n    refs.elHours.textContent = hours\n    refs.elMins.textContent = mins\n    refs.elSecs.textContent = secs\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jul 17, 2022')\n});\n\ntimer.startInterval()"]}